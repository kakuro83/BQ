# Cromatograf√≠a.py ‚Äì App para Olimpiada de Bioqu√≠mica

import streamlit as st
import pandas as pd

# --- T√≠tulo de la app ---
st.set_page_config(page_title="Olimpiada de Bioqu√≠mica ‚Äì Purificaci√≥n de Prote√≠nas")
st.title("üèÜ Olimpiada de Bioqu√≠mica ‚Äì Estrategia de Purificaci√≥n de Prote√≠nas")

# --- Enlace base para exportar como CSV desde Google Sheets ---
url_hoja = "https://docs.google.com/spreadsheets/d/1Rqk1GZ3Y5KKNT5VjTXI-pbFhlVZ-c-XcCCjmXAM6DiQ/export?format=csv&gid="

# Diccionario de pesta√±as (hojas) y sus IDs (gid) corregidos
sheets = {
    "Ejercicio": "0",
    "Purificaci√≥n": "1556529394",
    "Datos": "1236785904"
}

# Funci√≥n para cargar una hoja con manejo de errores
def cargar_hoja(nombre, gid):
    try:
        enlace = url_hoja + gid
        df = pd.read_csv(enlace)
        st.success(f"‚úÖ Hoja '{nombre}' cargada correctamente.")
        return df
    except Exception as e:
        st.error(f"‚ùå Error al cargar la hoja '{nombre}': {e}")
        return pd.DataFrame()

# Cargar las hojas con control de errores
df_ejercicio = cargar_hoja("Ejercicio", sheets["Ejercicio"])
df_purificacion = cargar_hoja("Purificaci√≥n", sheets["Purificaci√≥n"])
df_datos = cargar_hoja("Datos", sheets["Datos"])

# Mostrar vista previa si se cargaron correctamente
if not df_ejercicio.empty:
    st.subheader("üß™ Prote√≠na Objetivo y Condiciones Iniciales")
    st.dataframe(df_ejercicio)

if not df_purificacion.empty:
    st.subheader("üß¨ Columnas de Purificaci√≥n Disponibles")
    st.dataframe(df_purificacion)

if not df_datos.empty:
    st.subheader("üìä Par√°metros Globales del Sistema")
    st.dataframe(df_datos)

st.info("Esta es la vista base de los datos. A partir de aqu√≠ construiremos la l√≥gica para dise√±ar la estrategia de purificaci√≥n.")
